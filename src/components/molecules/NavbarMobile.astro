---
import ToggleTheme from "@/components/atoms/ToggleTheme.astro";
import { Icon } from "astro-icon/components";

const isHomePage = Astro.url.pathname === "/";

const items = [
  {
    name: "Accueil",
    link: isHomePage ? "#home" : "/#home",
    icon: "home-outline",
  },
  {
    name: "Fonctionnalités",
    link: isHomePage ? "#features" : "/#features",
    icon: "bulb",
  },
  {
    name: "Tarif",
    link: isHomePage ? "#pricing" : "/#pricing",
    icon: "euro",
  },
  {
    name: "Blog",
    link: "/blog",
    icon: "newspaper",
  },
];
---

<div class="flex items-center space-x-2 md:hidden">
  <button
    id="mobile-menu-button"
    class="flex cursor-pointer items-center justify-center rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-800"
    aria-label="Toggle Menu"
  >
    <Icon
      id="menu-open-icon"
      name="menu"
      class="text-dark dark:text-light block h-6 w-6"
    />
  </button>
</div>

<!-- Effet de flou uniquement sous la navbar -->
<div id="mobile-menu" class="fixed inset-0 z-40 hidden pt-20 md:hidden">
  <!-- Overlay avec flou - commence sous la navbar -->
  <div
    id="menu-overlay"
    class="bg-primary/10 pointer-events-auto absolute inset-0 top-20 backdrop-blur-md"
  >
  </div>

  <!-- Contenu du menu -->
  <div class="relative z-50">
    <div
      id="menu-content"
      class="bg-light dark:bg-dark border-border-dark dark:border-border-dark container mx-auto rounded-lg border px-4 py-6 shadow-xl"
    >
      <!-- Menu Links avec icônes -->
      <div class="space-y-4">
        {
          items.map(item => (
            <a
              href={item.link}
              class="mobile-link flex items-center space-x-3 py-2"
            >
              <Icon
                name={item.icon}
                class="text-primary dark:text-primary-dark h-8 w-8"
              />
              <span class="!text-primary dark:!text-primary-dark !text-2xl !font-semibold">
                {item.name}
              </span>
            </a>
          ))
        }
      </div>

      <!-- Theme switcher -->
      <div class="flex justify-center py-8">
        <ToggleTheme name="theme-toggle-mobile" />
      </div>

      <!-- Séparateur -->
      <div class="border-primary dark:border-primary-dark my-6 border-t"></div>

      <!-- CTA Button -->
      <a
        href={isHomePage ? "#demo" : "/#demo"}
        class="mobile-link bg-primary dark:bg-primary-dark hover:bg-primary-dark dark:hover:bg-primary mb-4 block w-full rounded-lg py-3 text-center font-medium text-white transition-colors"
      >
        Demander une démo
      </a>
    </div>
  </div>
</div>

<script>
  function setupMobileMenu() {
    // --- Sélection des éléments ---
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuOverlay = document.getElementById("menu-overlay");
    const menuOpenIcon = document.getElementById("menu-open-icon");

    // --- Vérification cruciale des éléments ---
    if (!mobileMenuButton || !mobileMenu || !menuOverlay || !menuOpenIcon) {
      console.error(
        "Mobile Menu Error: One or more required elements were NOT FOUND in the DOM. Check IDs:",
        {
          button: mobileMenuButton,
          menu: mobileMenu,
          overlay: menuOverlay,
          openIcon: menuOpenIcon,
        }
      );
      // Si des éléments manquent, le reste du script ne peut pas fonctionner.
      return;
    }
    // console.log("Mobile Menu: All required elements found.");

    // --- État du menu ---
    let menuOpen = !mobileMenu.classList.contains("hidden");
    // console.log("Mobile Menu: Initial menuOpen state:", menuOpen);

    // --- Fonctions principales ---
    function openMenu() {
      // Vérifier si déjà ouvert pour éviter travail inutile
      if (menuOpen) {
        // console.log("Menu already open, doing nothing.");
        return;
      }
      // console.log("Opening menu...");
      if (mobileMenu) {
        mobileMenu.classList.remove("hidden");
      }

      if (menuOpenIcon) {
        menuOpenIcon.classList.add("hidden");
      }

      if (mobileMenuButton) {
        mobileMenuButton.setAttribute("aria-expanded", "true");
      }

      // Empêcher le défilement de l'arrière-plan
      document.documentElement.classList.add("no-scroll");

      menuOpen = true; // Mettre à jour l'état
      // console.log("Menu opened. New state:", menuOpen);
    }

    function closeMenu() {
      // Vérifier si déjà fermé
      if (!menuOpen) {
        // console.log("Menu already closed, doing nothing.");
        return;
      }
      // console.log("Closing menu...");

      if (mobileMenu) {
        mobileMenu.classList.add("hidden");
      }

      if (menuOpenIcon) {
        menuOpenIcon.classList.remove("hidden");
      }

      // menuCloseIcon.classList.add("hidden");

      if (mobileMenuButton) {
        mobileMenuButton.setAttribute("aria-expanded", "false");
      }

      document.documentElement.classList.remove("no-scroll");

      document.body.style.overflow = ""; // Rétablir le défilement
      menuOpen = false; // Mettre à jour l'état
      // console.log("Menu closed. New state:", menuOpen);
    }

    function toggleMenu(event: MouseEvent) {
      // console.log("toggleMenu called. Current menuOpen state:", menuOpen);
      // event.preventDefault(); // Décommentez si le bouton est un lien ou cause un comportement par défaut indésirable
      event.stopPropagation(); // Empêche le clic de déclencher d'autres listeners sur les parents

      if (menuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    }

    // --- Ajout des écouteurs d'événements ---

    // 1. Clic sur le bouton principal (qui contient les deux icônes)
    mobileMenuButton.addEventListener("click", toggleMenu);
    // console.log("Mobile Menu: Event listener added to toggle button.");

    // 2. Clic sur l'overlay (pour fermer)
    menuOverlay.addEventListener("click", event => {
      // S'assurer que le clic est bien sur l'overlay lui-même
      // et non sur un élément enfant (comme le contenu du menu qui pourrait être au-dessus)
      if (event.target === menuOverlay) {
        // console.log("Mobile Menu: Overlay clicked directly.");
        closeMenu();
      } else {
        // console.log(
        //   "Mobile Menu: Click inside overlay area, but not on overlay itself."
        // );
      }
    });
    // console.log("Mobile Menu: Event listener added to overlay.");

    // 3. Clic sur les liens du menu mobile (pour fermer)
    const mobileLinks = document.querySelectorAll("#mobile-menu .mobile-link"); // Ciblage plus précis
    mobileLinks.forEach(link => {
      link.addEventListener("click", () => {
        // console.log("Mobile Menu: Mobile link clicked.");
        closeMenu();
        // Pas besoin de preventDefault pour les liens # internes à la page en général
      });
    });
    // console.log(
    //   `Mobile Menu: Event listeners added to ${mobileLinks.length} mobile links.`
    // );

    // 4. Appui sur la touche 'Echap' (pour fermer)
    document.addEventListener("keydown", event => {
      if (event.key === "Escape" && menuOpen) {
        // console.log("Mobile Menu: Escape key pressed.");
        closeMenu();
      }
    });
    // console.log("Mobile Menu: Event listener added for Escape key.");

    // --- État initial d'accessibilité ---
    mobileMenuButton.setAttribute("aria-expanded", menuOpen.toString());
    // console.log("Mobile Menu: Initial setup complete.");
  } // Fin de la fonction setupMobileMenu

  // --- Exécution du script ---
  document.addEventListener("astro:page-load", setupMobileMenu);

  let initialSetupDone = false;
  document.addEventListener("astro:page-load", () => {
    initialSetupDone = true;
  });

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      if (!initialSetupDone) setupMobileMenu();
    });
  } else {
    // DOMContentLoaded a déjà eu lieu avant que cet écouteur ne soit ajouté
    if (!initialSetupDone) setupMobileMenu();
  }
</script>
