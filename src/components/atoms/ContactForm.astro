---

---

<div
  class="not-content my-3rounded-3xl dark:bg-dark text-dark dark:text-light bg-light mx-auto border border-gray-200 p-6 md:p-10"
>
  <h3 class="text-center">Contactez Nous</h3>
  <div
    id="form-success"
    class="text-success dark:text-success-dark my-3 hidden rounded bg-green-100 p-3"
  >
    Message envoyé avec succès !
  </div>
  <div
    id="form-error"
    class="text-error dark:text-error-dark my-3 hidden rounded bg-red-100 p-3"
  >
    Une erreur s'est produite. Veuillez réessayer.
  </div>
  <form id="contact-form" name="contact form" class="mt-4 flex flex-col gap-3">
    <div>
      <label for="contact-name">Nom</label>
      <input
        type="text"
        class="form__input"
        name="name"
        id="contact-name"
        placeholder="Votre nom préféré"
        required
      />
    </div>
    <div>
      <label for="contact-email">Email</label>
      <input
        type="email"
        class="form__input"
        name="email"
        id="contact-email"
        inputmode="email"
        placeholder="Votre meilleur email de contact"
        required
      />
    </div>
    <!-- honeypot field to catch bots -->
    <label for="emai" class="sr-only">Real users skip this field</label>
    <input id="emai" type="text" name="emai" class="sr-only" tabindex="-1" />
    <div>
      <label for="contact-message">Message</label>
      <textarea
        name="message"
        class="form__input"
        id="contact-message"
        rows="4"
        placeholder="Ecrivez votre message ici"
        required></textarea>
    </div>
    <button type="submit" class="btn-primary group" id="submit-button">
      <div
        id="button-text"
        class="dark:text-dark group-hover:text-dark text-white dark:group-hover:text-white"
      >
        Envoyer
      </div>
      <span id="button-loader" class="hidden">
        <svg
          class="mr-1 inline-block h-5 w-5 animate-spin"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        En cours...
      </span>
    </button>
  </form>
</div>

<style>
  @import "tailwindcss/theme" theme(reference);
  .form__input {
    @apply w-full rounded-md border border-transparent bg-gray-200 p-2.5 transition outline-none;
    @apply focus-visible:border-blue-600/70 focus-visible:ring-2 focus-visible:ring-blue-600/50;
  }
  .hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const successMessage = document.getElementById(
      "form-success"
    ) as HTMLDivElement;
    const errorMessage = document.getElementById(
      "form-error"
    ) as HTMLDivElement;
    const submitButton = document.getElementById(
      "submit-button"
    ) as HTMLButtonElement;
    const buttonText = document.getElementById(
      "button-text"
    ) as HTMLSpanElement;
    const buttonLoader = document.getElementById(
      "button-loader"
    ) as HTMLSpanElement;

    // Fonction pour réinitialiser les messages
    function resetMessages() {
      successMessage.classList.add("hidden");
      errorMessage.classList.add("hidden");
    }

    // Fonction pour afficher l'état de chargement
    function setLoading(isLoading: boolean) {
      if (isLoading) {
        buttonText.classList.add("hidden");
        buttonLoader.classList.remove("hidden");
        submitButton.disabled = true;
      } else {
        buttonText.classList.remove("hidden");
        buttonLoader.classList.add("hidden");
        submitButton.disabled = false;
      }
    }

    form?.addEventListener("submit", async e => {
      e.preventDefault();
      resetMessages();
      setLoading(true);

      try {
        const formData = new FormData(form);

        const response = await fetch("/contact", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (response.ok) {
          successMessage.textContent =
            result.statusText || "Message envoyé avec succès !";
          successMessage.classList.remove("hidden");
          form.reset();
        }
        // Afficher le message d'erreur
        else {
          errorMessage.textContent =
            result.statusText ||
            "Une erreur s'est produite. Veuillez réessayer.";
          errorMessage.classList.remove("hidden");
        }
      } catch (error) {
        console.error("Erreur lors de l'envoi du formulaire:", error);
        errorMessage.textContent =
          "Une erreur s'est produite. Veuillez réessayer.";
        errorMessage.classList.remove("hidden");
      } finally {
        setLoading(false);
      }
    });
  });
</script>
