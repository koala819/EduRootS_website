---
import { Icon } from "astro-icon/components";

interface NavItem {
  href: string;
  text: string;
}

const navItems: NavItem[] = [
  { href: "#features", text: "Fonctionnalit√©s" },
  { href: "#solutions", text: "Solutions" },
  { href: "#testimonials", text: "T√©moignages" },
  { href: "#faq", text: "FAQ" },
];
---

<header
  class="fixed top-0 left-0 z-[1000] w-full bg-white shadow-md dark:bg-black"
>
  <div class="container mx-auto px-4">
    <nav class="flex items-center justify-between py-4">
      <!-- Logo -->
      <a
        href="#home"
        class="text-primary dark:text-primary-dark flex items-center gap-2 !text-2xl font-extrabold !no-underline lg:!text-3xl"
      >
        <Icon
          name="logo-EduXcoM"
          class="text-primary dark:text-primary-dark text-6xl"
        />
        Edu
        <span class="!text-secondary dark:!text-secondary-dark !text-3xl"
          >XcoM</span
        >
      </a>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="cursor-pointer text-2xl md:hidden"
        aria-label="Toggle menu"
      >
        <span id="menu-icon">‚ò∞</span>
      </button>

      <!-- Desktop Navigation -->
      <div class="hidden items-center gap-4 md:flex lg:gap-8">
        <ul class="flex items-center gap-8">
          {
            navItems.map(item => (
              <li class="group">
                <a
                  href={item.href}
                  class="nav-link hover:text-primary dark:hover:text-primary-dark relative !text-xs font-medium transition-colors duration-300 lg:!text-sm"
                  data-section={item.href.substring(1)}
                >
                  {item.text}
                  <hr class="nav-indicator bg-primary dark:bg-primary-dark absolute bottom-[-4px] left-0 h-0.5 w-0 transition-all duration-300 group-hover:w-full" />
                </a>
              </li>
            ))
          }
        </ul>

        <!-- Desktop Theme Toggle - Am√©lior√© -->
        <button
          id="theme-toggle-desktop"
          class="bg-light-dark dark:bg-dark-background focus:ring-primary rounded-full p-2 transition-all duration-300 hover:scale-110 focus:ring-2 focus:outline-none"
          aria-label="Changer de th√®me"
        >
          <!-- Ic√¥ne Lune (mode clair) -->
          <Icon name="moon" class="block h-5 w-5 text-gray-800 dark:hidden" />
          <!-- Ic√¥ne Soleil (mode sombre) -->
          <Icon name="sun" class="hidden h-5 w-5 text-yellow-400 dark:block" />
        </button>

        <a href="#demo" class="btn-primary !text-sm"> Demander une d√©mo </a>
      </div>
    </nav>

    <!-- Mobile Navigation Menu (Hidden by default) -->
    <div
      id="mobile-menu"
      class="dark:bg-dark hidden h-screen rounded-lg bg-white py-4 shadow-md md:hidden"
    >
      <div class="flex w-full justify-center p-5">
        <button
          id="theme-toggle-mobile"
          class="bg-light-dark dark:bg-dark-light rounded-md p-2 transition-colors duration-200"
        >
          <span class="block dark:hidden">üåô</span>
          <span class="hidden dark:block">‚òÄÔ∏è</span>
        </button>
      </div>
      <ul class="mb-6 flex flex-col gap-4">
        {
          navItems.map(item => (
            <li>
              <a
                href={item.href}
                class="nav-link-mobile hover:text-primary dark:hover:text-primary-dark block py-2 font-medium transition-colors duration-300"
                data-section={item.href.substring(1)}
              >
                {item.text}
              </a>
            </li>
          ))
        }
      </ul>
      <a
        href="#demo"
        class="bg-primary dark:bg-primary-dark dark:text-dark hover:bg-primary-dark dark:hover:bg-primary block cursor-pointer rounded-lg px-5 py-2.5 text-center font-semibold text-white transition-all duration-300"
      >
        Demander une d√©mo
      </a>
    </div>
  </div>

  <script>
    // Toggle mobile menu
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");

    function toggleMenu() {
      if (mobileMenu?.classList.contains("hidden")) {
        mobileMenu.classList.remove("hidden");
        if (menuIcon) menuIcon.textContent = "‚úï";
      } else {
        mobileMenu?.classList.add("hidden");
        if (menuIcon) menuIcon.textContent = "‚ò∞";
      }
    }

    mobileMenuButton?.addEventListener("click", toggleMenu);

    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu?.querySelectorAll("a");
    mobileLinks?.forEach(link => {
      link.addEventListener("click", () => {
        mobileMenu?.classList.add("hidden");
        if (menuIcon) menuIcon.textContent = "‚ò∞";
      });
    });

    // Theme toggle functionality
    const themeToggleDesktop = document.getElementById("theme-toggle-desktop");
    const themeToggleMobile = document.getElementById("theme-toggle-mobile");

    function toggleTheme() {
      document.documentElement.classList.toggle("dark");
      localStorage.theme = document.documentElement.classList.contains("dark")
        ? "dark"
        : "light";
    }

    themeToggleDesktop?.addEventListener("click", toggleTheme);
    themeToggleMobile?.addEventListener("click", toggleTheme);

    // Active section highlighting
    document.addEventListener("DOMContentLoaded", () => {
      const sections = document.querySelectorAll(
        "section[id], div[id='home'], div[id='features'], div[id='solutions'], div[id='testimonials'], div[id='faq']"
      );
      const navLinks = document.querySelectorAll(".nav-link, .nav-link-mobile");

      // Set active class for nav links
      function setActiveNavLink() {
        const scrollPosition = window.scrollY + 100; // Adding offset to account for navbar height

        // Find the current visible section
        sections.forEach(section => {
          const sectionTop = (section as HTMLElement).offsetTop;
          const sectionHeight = (section as HTMLElement).offsetHeight;
          const sectionId = section.getAttribute("id");

          if (
            scrollPosition >= sectionTop &&
            scrollPosition < sectionTop + sectionHeight
          ) {
            // Remove active class from all nav links
            navLinks.forEach(link => {
              if (link.getAttribute("data-section") === sectionId) {
                link.classList.add("text-primary", "dark:text-primary-dark");

                // For desktop nav, find and show the indicator
                if (link.classList.contains("nav-link")) {
                  const indicator = link.querySelector(".nav-indicator");
                  if (indicator) {
                    indicator.classList.add("w-full");
                  }
                }
              } else {
                link.classList.remove("text-primary", "dark:text-primary-dark");

                // For desktop nav, hide the indicator
                if (link.classList.contains("nav-link")) {
                  const indicator = link.querySelector(".nav-indicator");
                  if (indicator) {
                    indicator.classList.remove("w-full");
                  }
                }
              }
            });
          }
        });
      }

      // Call on load
      setActiveNavLink();

      // Call on scroll
      window.addEventListener("scroll", setActiveNavLink);
    });
  </script>
</header>
