---
import Layout from "@/layouts/BlogLayout.astro";
import { slugifyTitle } from "@/scripts/slugify";
import MarkdownRenderer from "@/components/blog/molecules/MarkdownRenderer.astro";
import type { MarkdownInstance } from "astro";

interface Frontmatter {
  title: string;
  date: string;
  description: string;
  tags: string[];
  author: string;
  readTime: number;
  image: string;
}

function formatDateFR(dateString: string) {
  if (!dateString) return "";
  const date = new Date(dateString);
  return date.toLocaleDateString("fr-FR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  });
}

export async function getStaticPaths() {
  const allPosts = await import.meta.glob<MarkdownInstance<Frontmatter>>(
    "@/pages/posts/*.md",
    { eager: true }
  );
  const cocon1 = await import.meta.glob<MarkdownInstance<Frontmatter>>(
    "@/pages/posts/Actus_Tendances/*.md",
    { eager: true }
  );
  const cocon2 = await import.meta.glob<MarkdownInstance<Frontmatter>>(
    "@/pages/posts/Contenus_Educatif/*.md",
    { eager: true }
  );

  const postModules = [
    ...Object.values(allPosts),
    ...Object.values(cocon1),
    ...Object.values(cocon2),
  ];

  const postsData = postModules
    .map(postModule => {
      if (
        !postModule ||
        !postModule.frontmatter ||
        typeof postModule.rawContent !== "function"
      ) {
        console.warn(
          "[getStaticPaths] Module MD invalide ou incomplet trouvé : ",
          postModule?.file
        );
        return null;
      }
      try {
        const rawString = postModule.rawContent();

        if (typeof rawString !== "string") {
          console.warn(
            "[getStaticPaths] postModule.rawContent() n'a pas retourné une chaîne pour : ",
            postModule?.file
          );
          return null;
        }

        return {
          frontmatter: postModule.frontmatter,
          rawContent: rawString, // Stocker la chaîne résultante
          url: postModule.url, // Garder l'URL si besoin
          file: postModule.file, // Garder le chemin du fichier si besoin
        };
      } catch (error) {
        console.error(
          "[getStaticPaths] Erreur en appelant rawContent() pour : ",
          postModule?.file,
          error
        );
        return null;
      }
    })
    .filter(p => p !== null);

  return postsData
    .map(postData => {
      if (!postData.frontmatter || !postData.frontmatter.title) {
        console.error(
          "[getStaticPaths] Données de post invalides pour slugification : ",
          postData
        );
        return null;
      }
      return {
        params: {
          slug: slugifyTitle(postData.frontmatter.title),
        },
        props: {
          post: postData,
        },
      };
    })
    .filter(p => p !== null);
}

const { post } = Astro.props;

const rawMarkdownContent = post?.rawContent;
const frontmatter = post?.frontmatter;
---

<Layout
  pageTitle={frontmatter?.title ?? "Titre Indisponible"}
  frontmatter={{
    title: frontmatter?.title ?? "",
    description: frontmatter?.description ?? "",
    tags: Array.isArray(frontmatter?.tags) ? frontmatter.tags : [],
    author: frontmatter?.author ?? "",
    image: frontmatter?.image ?? "",
    date: frontmatter?.date ?? "",
    readTime: frontmatter?.readTime ?? 0,
  }}
  displayWave={false}
>
  <article class="mx-auto max-w-3xl px-6 py-16 lg:px-8 lg:py-24">
    <header class="mb-4 border-b border-gray-200 dark:border-gray-800">
      <div
        class="flex items-center gap-4 text-lg text-gray-600 dark:text-gray-400"
      >
        <time datetime={frontmatter?.date}>
          {formatDateFR(frontmatter?.date ?? "")}
        </time>
        <span class="text-gray-300 dark:text-gray-700">•</span>
        <span>{frontmatter?.readTime ?? "?"} min de lecture</span>
      </div>
    </header>

    <div class="prose prose-lg dark:prose-invert mx-auto space-y-12">
      <MarkdownRenderer content={rawMarkdownContent} />
    </div>

    <footer class="mt-16 border-t border-gray-200 pt-8 dark:border-gray-800">
      <div class="rounded-xl bg-gray-50 p-8 dark:bg-gray-900">
        <p class="text-lg leading-relaxed text-gray-600 dark:text-gray-400">
          Eduroots est une plateforme éducative open source qui connecte
          enseignants, élèves et parents pour une gestion d'école en ligne
          fluide et efficace. Notre solution tout-en-un simplifie le quotidien
          des établissements scolaires tout en renforçant la qualité
          pédagogique.
        </p>
      </div>
    </footer>
  </article>
</Layout>
